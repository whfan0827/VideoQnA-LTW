# Production Dockerfile for VideoQnA-LTW
FROM node:18-alpine AS frontend-builder

# Build frontend
WORKDIR /frontend
COPY app/frontend/package*.json ./
RUN npm ci

COPY app/frontend/ ./
# Clear any existing node_modules platform-specific binaries and reinstall
RUN rm -rf node_modules/.cache && npm rebuild
RUN npm run build

# Production Python image
FROM python:3.10-slim AS production

# Security: Create non-root user
RUN groupadd -r appuser && useradd --no-log-init -r -g appuser appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set work directory
WORKDIR /app

# Copy requirements and install dependencies
COPY app/backend/requirements.txt ./
COPY app/backend/requirements.prod.txt ./
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.prod.txt

# Copy backend code
COPY app/backend/ ./

# Copy built frontend from previous stage (Vite outputs to ../backend/static)
COPY --from=frontend-builder /backend/static ./static

# Create necessary directories and set permissions
RUN mkdir -p logs data .chroma \
    && chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Environment variables
ENV PYTHONPATH=/app
ENV FLASK_ENV=production
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${PORT:-5000}/indexes || exit 1

# Expose port
EXPOSE 5000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Run with Gunicorn
CMD ["gunicorn", "-c", "gunicorn.conf.py", "app:app"]