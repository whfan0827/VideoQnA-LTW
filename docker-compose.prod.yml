version: '3.8'

services:
  # Main application service - Production
  videoqna-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "${APP_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - PORT=5000
      
      # Database configuration
      - LANGUAGE_MODEL=${LANGUAGE_MODEL:-openai}
      - PROMPT_CONTENT_DB=${PROMPT_CONTENT_DB:-azure_search}
      - PROMPT_CONTENT_DB_NAME=${PROMPT_CONTENT_DB_NAME}
      
      # Azure OpenAI Configuration
      - AZURE_OPENAI_SERVICE=${AZURE_OPENAI_SERVICE}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_CHATGPT_DEPLOYMENT=${AZURE_OPENAI_CHATGPT_DEPLOYMENT}
      - AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT=${AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT}
      
      # Azure Search Configuration
      - AZURE_SEARCH_SERVICE=${AZURE_SEARCH_SERVICE}
      - AZURE_SEARCH_KEY=${AZURE_SEARCH_KEY}
      - AZURE_SEARCH_INDEX=${AZURE_SEARCH_INDEX}
      
      # Azure Video Indexer Configuration
      - AccountName=${AccountName}
      - ResourceGroup=${ResourceGroup}
      - SubscriptionId=${SubscriptionId}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Rate limiting backend
      - REDIS_URL=redis://redis:6379
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
    volumes:
      # Persistent data storage
      - app_data:/app/data
      - chroma_data:/app/.chroma
      - app_logs:/app/logs
      
    networks:
      - videoqna-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/indexes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - videoqna-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if using HTTPS)
    networks:
      - videoqna-network
    restart: unless-stopped
    depends_on:
      - videoqna-app
    profiles:
      - with-nginx  # Use: docker-compose --profile with-nginx up

volumes:
  app_data:
  chroma_data:
  redis_data:
  app_logs:

networks:
  videoqna-network:
    driver: bridge