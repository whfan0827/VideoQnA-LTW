{
  "permissions": {
    "allow": [
      "WebFetch(domain:api-portal.videoindexer.ai)",
      "WebFetch(domain:learn.microsoft.com)",
      "mcp__ide__getDiagnostics",
      "Bash(mkdir:*)",
      "Bash(python test_hash_cache.py:*)",
      "Bash(rm:*)",
      "Bash(sqlite3:*)",
      "Bash(find:*)",
      "Bash(true)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(npm install:*)",
      "Bash(cp:*)",
      "Bash(copy:*)",
      "Bash(npm run build:*)",
      "Bash(npm uninstall:*)",
      "WebSearch",
      "WebFetch(domain:github.com)",
      "Bash(mv:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=/c/PS/VideoQnA-LTW/app/backend python database/migrate_conversation_starters.py)",
      "Bash(PYTHONPATH=/c/PS/VideoQnA-LTW/app/backend python test_conversation_starters.py)",
      "Bash(cat:*)",
      "Bash(az:*)",
      "Bash(powershell:*)",
      "Bash(docker:*)",
      "Bash(winget install:*)",
      "Bash(where az)",
      "Bash(Get-ChildItem \"C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\CLI2\\wbin\" -ErrorAction SilentlyContinue)",
      "Bash(ping:*)",
      "Bash($timestamp = Get-Date -Format \"yyyyMMddHHmmss\")",
      "Bash(Write-Host \"建立標籤: $timestamp\")",
      "Bash(Get-ChildItem \"C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\CLI2\\wbin\" -ErrorAction SilentlyContinue)",
      "Bash($env:PATH += \";C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\")",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" --version)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" login)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" account show)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" acr list --output table)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" resource list --name \"*videoqna*\" --output table)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" group list --output table)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" resource list --resource-group ***REMOVED_RESOURCE_GROUP*** --output table)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" acr login --name ***REMOVED_ACR_NAME***)",
      "Bash(Get-ChildItem \"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\" -ErrorAction SilentlyContinue)",
      "Bash(grep:*)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" cognitiveservices account list --resource-group ***REMOVED_RESOURCE_GROUP*** --output table)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" cognitiveservices account keys list --name ***REMOVED_RESOURCE_NAME*** --resource-group ***REMOVED_RESOURCE_GROUP***)",
      "Bash(timeout:*)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" account show --output table)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" resource list --name \"*videoindexer*\" --output table)",
      "Bash(git add:*)",
      "Bash(pip install:*)",
      "Bash(.venv/Scripts/pip install:*)",
      "Bash(set AZURE_STORAGE_ACCOUNT_NAME=***REMOVED_STORAGE_ACCOUNT***)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" resource show --name ***REMOVED_VI_ACCOUNT*** --resource-group ***REMOVED_RESOURCE_GROUP*** --resource-type Microsoft.VideoIndexer/accounts)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" role assignment list --assignee ***REMOVED_CLIENT_ID*** --output table)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" role assignment create --assignee ***REMOVED_CLIENT_ID*** --role \"Video Indexer Account Reader\" --scope \"/subscriptions/***REMOVED_SUBSCRIPTION_ID***/resourceGroups/***REMOVED_RESOURCE_GROUP***/providers/Microsoft.VideoIndexer/accounts/***REMOVED_VI_ACCOUNT***\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nfrom services.blob_storage_service import get_blob_storage_service\nblob_service = get_blob_storage_service()\nblob_info = blob_service.get_blob_properties(''2025news'', ''台灣特斯拉降價！Model 3變便宜了 ｜ 錢線百分百 ｜ 20240215 ｜ 完整版｜ 非凡新聞台.mp4'')\nif blob_info:\n    print(f''Blob size: {blob_info.size} bytes'')\n    print(f''Blob name: {blob_info.name}'')\n    print(f''Container: {blob_info.container}'')\nelse:\n    print(''Blob not found or error occurred'')\n\")",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" resource show --name ***REMOVED_VI_ACCOUNT*** --resource-group ***REMOVED_RESOURCE_GROUP*** --resource-type Microsoft.VideoIndexer/accounts --query \"{name:name, location:location, sku:sku, properties:properties}\" --output json)",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nfrom vi_search.vi_client.account_token_provider import TokenCache\nfrom datetime import datetime, timedelta\n\n# Test the enhanced token cache logic\ncache = TokenCache()\nprint(''Testing TokenCache improvements...'')\n\n# Simulate a token that expires in 3 minutes (should be rejected due to 5-minute buffer)\ncache.token_expires_at = datetime.now() + timedelta(minutes=3)\ncache.arm_token = ''test_arm_token''\ncache.vi_token = ''test_vi_token''\ncache.consts_hash = ''test_hash''\n\n# Test with mock consts\nclass MockConsts:\n    def __init__(self):\n        self.AccountName = ''test''\n        self.SubscriptionId = ''test''\n        self.ResourceGroup = ''test''\n\nmock_consts = MockConsts()\n\n# This should return None due to the 5-minute buffer\narm, vi = cache.get_cached_tokens(mock_consts)\nif arm is None and vi is None:\n    print(''✅ Token cache buffer working correctly - expired tokens rejected'')\nelse:\n    print(''❌ Token cache buffer not working - expired tokens accepted'')\n\n# Test with a token that expires in 10 minutes (should be accepted)\ncache.token_expires_at = datetime.now() + timedelta(minutes=10)\narm, vi = cache.get_cached_tokens(mock_consts)\nif arm is not None and vi is not None:\n    print(''✅ Token cache working correctly - valid tokens accepted'')\nelse:\n    print(''❌ Token cache not working - valid tokens rejected'')\n\nprint(''Token cache test completed.'')\n\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nprint(''Testing enhanced error handling...'')\n\n# Test that our simplified auto_retry_auth decorator is available\nfrom vi_search.vi_client.video_indexer_client import auto_retry_auth\nprint(''auto_retry_auth decorator imported successfully'')\n\n# Test enhanced diagnostic messages  \nfrom vi_search.vi_client.video_indexer_client import VideoIndexerClient\nprint(''VideoIndexerClient imported successfully'')\n\nprint(''All imports successful - modifications are syntactically correct'')\n\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python database/migrate_conversation_starters.py)",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python test_conversation_starters.py)",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nprint(''Testing file upload with enhanced diagnostics...'')\nimport sys\nfrom pathlib import Path\n\n# Get file info for diagnostic purposes\ntest_file = Path(''C:/PS/VideoQnA-LTW/data/9665decce460.mp4'')\nif test_file.exists():\n    file_size = test_file.stat().st_size / (1024 * 1024)  # MB\n    print(f''Test file: {test_file.name}'')\n    print(f''File size: {file_size:.1f} MB'')\n    print(''File exists and ready for testing'')\n    \n    # Test file hash cache functionality\n    from vi_search.file_hash_cache import get_global_cache\n    cache = get_global_cache()\n    cached_info = cache.get_cached_video_info(test_file)\n    if cached_info:\n        print(f''File is already cached with video_id: {cached_info[\"\"video_id\"\"]}'')\n    else:\n        print(''File not in cache - will be uploaded if tested'')\nelse:\n    print(''Test file not found'')\n\nprint(''Diagnostic test completed successfully'')\n\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nimport os\nfrom pathlib import Path\n\n# Check file sizes\ndata_dir = Path(''C:/PS/VideoQnA-LTW/data'')\nvideo_files = list(data_dir.glob(''*.mp4''))\n\nprint(''Available video files with sizes:'')\nfile_sizes = []\nfor video_file in video_files[:10]:  # Check first 10 files\n    try:\n        size_mb = video_file.stat().st_size / (1024 * 1024)\n        file_sizes.append((video_file.name, size_mb))\n        print(f''{video_file.name}: {size_mb:.1f} MB'')\n    except:\n        pass\n\n# Find smallest file for testing\nif file_sizes:\n    smallest = min(file_sizes, key=lambda x: x[1])\n    print(f''\\nSmallest file for testing: {smallest[0]} ({smallest[1]:.1f} MB)'')\nelse:\n    print(''No files found'')\n\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nfrom pathlib import Path\nfrom vi_search.file_hash_cache import get_global_cache\n\ntest_file = Path(''C:/PS/VideoQnA-LTW/data/1abe68081fcb.mp4'')\ncache = get_global_cache()\n\nprint(f''Testing file: {test_file.name}'')\nprint(f''File size: {test_file.stat().st_size / (1024*1024):.1f} MB'')\n\ncached_info = cache.get_cached_video_info(test_file)\nif cached_info:\n    print(f''File is cached with video_id: {cached_info[\"\"video_id\"\"]}'')\n    print(f''Cached at: {cached_info.get(\"\"cached_at_readable\"\", \"\"unknown\"\")}'')\nelse:\n    print(''File not in cache - ready for fresh upload test'')\n\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nprint(''Testing video indexer client enhancements...'')\n\n# Test improved error handling\nfrom vi_search.vi_client.video_indexer_client import VideoIndexerClient, auto_retry_auth\nprint(''✅ Enhanced VideoIndexerClient imported successfully'')\n\n# Test improved token cache\nfrom vi_search.vi_client.account_token_provider import TokenCache\ncache = TokenCache()\nprint(''✅ Enhanced TokenCache imported successfully'')\n\n# Test error diagnostics would be working\nfrom vi_search.vi_client.video_indexer_client import auto_retry_auth\nprint(''✅ Simplified auto_retry_auth decorator available'')\n\nprint()\nprint(''Summary of completed enhancements:'')\nprint(''✅ Token cache with 5-minute safety buffer'')\nprint(''✅ Simplified error retry logic (10054 and auth errors only)'')  \nprint(''✅ Enhanced diagnostic messages for upload failures'')\nprint(''✅ Fixed video deletion logic to handle video_id vs filename'')\nprint()\nprint(''All stability improvements are in place and ready for testing!'')\n\")",
      "Bash(PYTHONPATH=\"/c/PS/VideoQnA-LTW/app/backend\" python -c \"\nfrom vi_search.vi_client.video_indexer_client import init_video_indexer_client\nfrom dotenv import dotenv_values\nfrom pathlib import Path\nimport json\n\n# Load configuration\nenv_path = Path(__file__).parent.parent / ''.env''\nconfig = dotenv_values(env_path)\n\ntry:\n    print(''初始化 Video Indexer 客戶端...'')\n    client = init_video_indexer_client(config)\n    \n    video_id = ''xbrz1yyfkp''\n    print(f''檢查影片 {video_id} 在 Azure Video Indexer 中的狀態...'')\n    \n    # 嘗試檢查影片處理狀態\n    try:\n        result = client.is_video_processed(video_id)\n        print(f''影片 {video_id} 處理狀態檢查結果: {result}'')\n    except Exception as e:\n        print(f''檢查處理狀態時發生錯誤: {str(e)}'')\n    \n    # 嘗試獲取影片資訊\n    try:\n        video_info = client.get_video_async(video_id)\n        print(f''影片 {video_id} 資訊:'')\n        print(json.dumps(video_info, indent=2)[:500] + ''...'')\n    except Exception as e:\n        print(f''獲取影片資訊時發生錯誤: {str(e)}'')\n        \n    # 嘗試獲取 prompt content\n    try:\n        prompt_content = client.get_prompt_content_async(video_id, raise_on_not_found=False)\n        if prompt_content:\n            print(f''影片 {video_id} 的 prompt content 存在，大小: {len(str(prompt_content))} 字元'')\n        else:\n            print(f''影片 {video_id} 沒有 prompt content'')\n    except Exception as e:\n        print(f''獲取 prompt content 時發生錯誤: {str(e)}'')\n        \nexcept Exception as e:\n    print(f''初始化客戶端或操作時發生錯誤: {str(e)}'')\n\")",
      "Bash(PYTHONPATH:*)",
      "Bash(\"C:\\Program Files\\Microsoft SDKs\\Azure\\CLI2\\wbin\\az.cmd\" search admin-key show --resource-group ***REMOVED_RESOURCE_GROUP*** --service-name ***REMOVED_RESOURCE_NAME***)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "C:\\c\\PS\\VideoQnA-LTW\\app\\frontend\\public\\assets",
      "C:\\c\\PS\\VideoQnA-LTW\\app\\frontend\\src",
      "C:\\mnt\\c\\PS\\VideoQnA-LTW\\app",
      "C:\\c\\PS\\VideoQnA-LTW\\app"
    ]
  }
}